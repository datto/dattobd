!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACCESS_ONCE	src/dattobd.c	551;"	d	file:
ACTIVE	src/dattobd.c	733;"	d	file:
BASE_DIR	Makefile	/^export BASE_DIR = $(abspath .)$/;"	m
BINARY_NAME	app/Makefile	/^BINARY_NAME = dbdctl$/;"	m
BINARY_NAME	utils/Makefile	/^BINARY_NAME = update-img$/;"	m
BIO_EMPTY_LIST	src/dattobd.c	46;"	d	file:
BIO_SET_SIZE	src/dattobd.c	737;"	d	file:
BLOCK_TO_SECTOR	src/dattobd.c	723;"	d	file:
BUILDDIR	Makefile	/^BUILDDIR := $(CURDIR)\/pkgbuild$/;"	m
BUILDDIR	src/configure-tests/feature-tests/Makefile	/^BUILDDIR ?= $(PWD)\/build\/$(OBJ)$/;"	m
BUILDDIR_MAKEFILE	src/configure-tests/feature-tests/Makefile	/^BUILDDIR_MAKEFILE ?= $(PWD)\/build\/$(OBJ)\/Makefile$/;"	m
CC	Makefile	/^export CC = gcc$/;"	m
CCFLAGS	Makefile	/^export CCFLAGS = $(CFLAGS) -std=gnu99$/;"	m
CFLAGS	Makefile	/^CFLAGS ?= -Wall$/;"	m
CONTROL_DEVICE_NAME	src/dattobd.c	685;"	d	file:
COW_BLOCK_LOG_SIZE	src/dattobd.h	49;"	d
COW_BLOCK_SIZE	src/dattobd.h	50;"	d
COW_CLEAN	src/dattobd.h	53;"	d
COW_HEADER_SIZE	src/dattobd.h	51;"	d
COW_INDEX_ONLY	src/dattobd.h	54;"	d
COW_MAGIC	src/dattobd.h	52;"	d
COW_SECTION_SIZE	src/dattobd.c	720;"	d	file:
COW_UUID_SIZE	src/dattobd.h	48;"	d
COW_VERSION_0	src/dattobd.h	57;"	d
COW_VERSION_CHANGED_BLOCKS	src/dattobd.h	58;"	d
COW_VMALLOC_UPPER	src/dattobd.h	55;"	d
DATTOBD_DEFAULT_SNAP_DEVICES	src/dattobd.c	744;"	d	file:
DATTOBD_H_	src/dattobd.h	8;"	d
DATTOBD_INCLUDES_H_	src/includes.h	8;"	d
DATTOBD_KERNEL_CONFIG_H	src/kernel-config.h	4;"	d
DATTOBD_MAX_SNAP_DEVICES	src/dattobd.c	745;"	d	file:
DATTOBD_PASSTHROUGH	src/dattobd.c	742;"	d	file:
DATTOBD_VERSION	src/dattobd.c	/^MODULE_VERSION(DATTOBD_VERSION);$/;"	v
DATTOBD_VERSION	src/dattobd.h	17;"	d
DATTO_IOCTL_MAGIC	src/dattobd.h	18;"	d
DRIVER_NAME	src/dattobd.c	684;"	d	file:
DeviceTestCase	tests/devicetestcase.py	/^class DeviceTestCase(unittest.TestCase):$/;"	c
DeviceTestCase	tests/test_destroy.py	/^from devicetestcase import DeviceTestCase$/;"	i
DeviceTestCase	tests/test_setup.py	/^from devicetestcase import DeviceTestCase$/;"	i
DeviceTestCase	tests/test_snapshot.py	/^from devicetestcase import DeviceTestCase$/;"	i
DeviceTestCase	tests/test_transition_incremental.py	/^from devicetestcase import DeviceTestCase$/;"	i
EXTRA_CFLAGS	src/Makefile	/^EXTRA_CFLAGS := -g$/;"	m
EXTRA_CFLAGS	src/configure-tests/feature-tests/Makefile	/^EXTRA_CFLAGS := -g -Werror -I$(src)\/..\/..$/;"	m
FEATURE_TEST_BUILD_DIR	src/Makefile	/^FEATURE_TEST_BUILD_DIR := configure-tests\/feature-tests\/build$/;"	m
FFI	tests/dattobd.py	/^from cffi import FFI$/;"	i
FMODE_NONOTIFY	src/dattobd.c	561;"	d	file:
HAVE_BDEV_STACK_LIMITS	src/kernel-config.h	6;"	d
HAVE_BD_SUPER	src/kernel-config.h	7;"	d
HAVE_BIO_BI_BDEV	src/kernel-config.h	8;"	d
HAVE_BIO_BI_POOL	src/kernel-config.h	9;"	d
HAVE_BIO_LIST	src/kernel-config.h	10;"	d
HAVE_BLKDEV_GET_BY_PATH	src/kernel-config.h	11;"	d
HAVE_BLK_SET_DEFAULT_LIMITS	src/kernel-config.h	12;"	d
HAVE_BLK_SET_STACKING_LIMITS	src/kernel-config.h	13;"	d
HAVE_BVEC_MERGE_DATA	src/kernel-config.h	14;"	d
HAVE_COMPOUND_HEAD	src/kernel-config.h	15;"	d
HAVE_DENTRY_PATH_RAW	src/kernel-config.h	16;"	d
HAVE_D_UNLINKED	src/kernel-config.h	17;"	d
HAVE_FILE_INODE	src/kernel-config.h	18;"	d
HAVE_FMODE_T	src/kernel-config.h	19;"	d
HAVE_FOPS_FALLOCATE	src/kernel-config.h	20;"	d
HAVE_GENHD_FL_NO_PART_SCAN	src/kernel-config.h	21;"	d
HAVE_KERN_PATH	src/kernel-config.h	22;"	d
HAVE_MAKE_REQUEST_FN_VOID	src/kernel-config.h	23;"	d
HAVE_MERGE_BVEC_FN	src/kernel-config.h	24;"	d
HAVE_MNT_WANT_WRITE	src/kernel-config.h	25;"	d
HAVE_NOOP_LLSEEK	src/kernel-config.h	26;"	d
HAVE_PART_NR_SECTS_READ	src/kernel-config.h	27;"	d
HAVE_PATH_PUT	src/kernel-config.h	28;"	d
HAVE_PROC_CREATE	src/kernel-config.h	29;"	d
HAVE_SB_START_WRITE	src/kernel-config.h	30;"	d
HAVE_STRUCT_PATH	src/kernel-config.h	31;"	d
HAVE_SUBMIT_BIO_WAIT	src/kernel-config.h	32;"	d
HAVE_TASK_STRUCT_TASK_WORKS_CB_HEAD	src/kernel-config.h	33;"	d
HAVE_THAW_BDEV_INT	src/kernel-config.h	34;"	d
HAVE_USER_PATH_AT	src/kernel-config.h	35;"	d
HAVE_UUID_H	src/kernel-config.h	36;"	d
HAVE_VZALLOC	src/kernel-config.h	37;"	d
INC_THREAD_NAME_FMT	src/dattobd.c	689;"	d	file:
INDEX_BUFFER_SIZE	utils/update-img.c	18;"	d	file:
INFO_PROC_FILE	src/dattobd.c	683;"	d	file:
INSTALLDIR	app/Makefile	/^INSTALLDIR = $(PREFIX)\/bin$/;"	m
INSTALLDIR	utils/Makefile	/^INSTALLDIR = $(PREFIX)\/bin$/;"	m
INSTALL_MOD_DIR	src/Makefile	/^INSTALL_MOD_DIR ?= extra$/;"	m
IOCTL_DATTOBD_INFO	src/dattobd.h	92;"	d
IOCTL_DESTROY	src/dattobd.h	88;"	d
IOCTL_GET_FREE	src/dattobd.h	93;"	d
IOCTL_RECONFIGURE	src/dattobd.h	91;"	d
IOCTL_RELOAD_INC	src/dattobd.h	87;"	d
IOCTL_RELOAD_SNAP	src/dattobd.h	86;"	d
IOCTL_SETUP_SNAP	src/dattobd.h	85;"	d
IOCTL_TRANSITION_INC	src/dattobd.h	89;"	d
IOCTL_TRANSITION_SNAP	src/dattobd.h	90;"	d
IOCTL_WAKE_UP_GROUP	src/dattobd.h	94;"	d
IOCTL_WAKE_UP_TRANSITION_GROUP	src/dattobd.h	95;"	d
KDIR	src/Makefile	/^KDIR := \/lib\/modules\/$(KERNELVERSION)\/build$/;"	m
KDIR	src/configure-tests/feature-tests/Makefile	/^KDIR := \/lib\/modules\/$(KERNELVERSION)\/build$/;"	m
KERNELVERSION	src/Makefile	/^KERNELVERSION ?= $(shell uname -r)$/;"	m
KERNELVERSION	src/configure-tests/feature-tests/Makefile	/^KERNELVERSION ?= $(shell uname -r)$/;"	m
LIBDATTOBD_H_	lib/libdattobd.h	8;"	d
LIBDIR	lib/Makefile	/^LIBDIR = $(PREFIX)\/lib64$/;"	m
LIBNAME	lib/Makefile	/^LIBNAME = libdattobd.so$/;"	m
LOG_DEBUG	src/dattobd.c	20;"	d	file:
LOG_ERROR	src/dattobd.c	26;"	d	file:
LOG_WARN	src/dattobd.c	25;"	d	file:
MAX_CLONES_PER_BIO	src/dattobd.c	726;"	d	file:
MAYBE_UNUSED	src/dattobd.c	729;"	d	file:
MIN	utils/update-img.c	20;"	d	file:
MIN_NICE	src/dattobd.c	556;"	d	file:
MRF_RETURN	src/dattobd.c	528;"	d	file:
MRF_RETURN	src/dattobd.c	535;"	d	file:
MRF_RETURN	src/dattobd.c	543;"	d	file:
MRF_RETURN_TYPE	src/dattobd.c	527;"	d	file:
MRF_RETURN_TYPE	src/dattobd.c	534;"	d	file:
MRF_RETURN_TYPE	src/dattobd.c	542;"	d	file:
Module	tests/kmod.py	/^class Module(object):$/;"	c
NUM_SEGMENTS	src/dattobd.c	674;"	d	file:
PKGBUILDFLAGS	Makefile	/^PKGBUILDFLAGS := --define "_topdir $(BUILDDIR)" -ba --with devmode$/;"	m
PKGBUILDROOT_CREATE_CMD	Makefile	/^PKGBUILDROOT_CREATE_CMD = mkdir -p $(BUILDDIR)\/DEBS $(BUILDDIR)\/SDEBS $(BUILDDIR)\/RPMS $(BUILDDIR)\/SRPMS \\$/;"	m
PREFIX	Makefile	/^export PREFIX = \/usr\/local$/;"	m
PRINTK_ADDR	src/kernel-config.h	42;"	d
PRINT_BIO	src/dattobd.c	27;"	d	file:
PWD	src/Makefile	/^PWD := $(shell pwd)$/;"	m
PWD	src/configure-tests/feature-tests/Makefile	/^PWD := $(shell pwd)$/;"	m
READ_MODE_BASE_DEVICE	src/dattobd.c	707;"	d	file:
READ_MODE_COW_FILE	src/dattobd.c	706;"	d	file:
READ_MODE_MIXED	src/dattobd.c	708;"	d	file:
READ_SYNC	src/dattobd.c	195;"	d	file:
REQ_DISCARD	src/dattobd.c	218;"	d	file:
REQ_FLUSH	src/dattobd.c	203;"	d	file:
REQ_OP_DISCARD	src/dattobd.c	/^	REQ_OP_DISCARD,         \/* request to discard sectors *\/$/;"	e	enum:req_op	file:
REQ_OP_FLUSH	src/dattobd.c	/^	REQ_OP_FLUSH,           \/* request for cache flush *\/$/;"	e	enum:req_op	file:
REQ_OP_READ	src/dattobd.c	/^	REQ_OP_READ,$/;"	e	enum:req_op	file:
REQ_OP_SECURE_ERASE	src/dattobd.c	/^	REQ_OP_SECURE_ERASE,    \/* request to securely erase sectors *\/$/;"	e	enum:req_op	file:
REQ_OP_WRITE	src/dattobd.c	/^	REQ_OP_WRITE,$/;"	e	enum:req_op	file:
REQ_OP_WRITE_SAME	src/dattobd.c	/^	REQ_OP_WRITE_SAME,      \/* write same block many times *\/$/;"	e	enum:req_op	file:
REQ_SECURE	src/dattobd.c	208;"	d	file:
REQ_WRITE	src/dattobd.c	199;"	d	file:
REQ_WRITE_SAME	src/dattobd.c	212;"	d	file:
RM	Makefile	/^export RM = rm -f$/;"	m
ROUND_DOWN	src/dattobd.c	676;"	d	file:
ROUND_UP	src/dattobd.c	675;"	d	file:
SECTORS_PER_BLOCK	src/dattobd.c	721;"	d	file:
SECTORS_PER_PAGE	src/dattobd.c	719;"	d	file:
SECTOR_SHIFT	src/dattobd.c	712;"	d	file:
SECTOR_SIZE	src/dattobd.c	715;"	d	file:
SECTOR_TO_BLOCK	src/dattobd.c	722;"	d	file:
SHARED_CCFLAGS	lib/Makefile	/^SHARED_CCFLAGS = -fPIC -lc -shared -Wl,-soname,$(LIBNAME).$(SOVER)$/;"	m
SNAPSHOT	src/dattobd.c	732;"	d	file:
SNAP_COW_THREAD_NAME_FMT	src/dattobd.c	687;"	d	file:
SNAP_DEVICE_NAME	src/dattobd.c	686;"	d	file:
SNAP_MRF_THREAD_NAME_FMT	src/dattobd.c	688;"	d	file:
SOURCES	app/Makefile	/^SOURCES = dbdctl.c$/;"	m
SOURCES	lib/Makefile	/^SOURCES = libdattobd.c$/;"	m
SOURCES	utils/Makefile	/^SOURCES = update-img.c$/;"	m
SOVER	lib/Makefile	/^SOVER = 1$/;"	m
SYS_CALL_TABLE_ADDR	src/kernel-config.h	41;"	d
SYS_MOUNT_ADDR	src/kernel-config.h	38;"	d
SYS_OLDUMOUNT_ADDR	src/kernel-config.h	40;"	d
SYS_UMOUNT_ADDR	src/kernel-config.h	39;"	d
TestDestroy	tests/test_destroy.py	/^class TestDestroy(DeviceTestCase):$/;"	c
TestSetup	tests/test_setup.py	/^class TestSetup(DeviceTestCase):$/;"	c
TestSnapshot	tests/test_snapshot.py	/^class TestSnapshot(DeviceTestCase):$/;"	c
TestTransitionToIncremental	tests/test_transition_incremental.py	/^class TestTransitionToIncremental(DeviceTestCase):$/;"	c
UMOUNT_NOFOLLOW	src/dattobd.c	401;"	d	file:
UNVERIFIED	src/dattobd.c	734;"	d	file:
X86_CR0_WP	src/dattobd.c	4950;"	d	file:
_FILE_OFFSET_BITS	utils/update-img.c	7;"	d	file:
__DATTOBD_PASSTHROUGH	src/dattobd.c	741;"	d	file:
__USE_LARGEFILE64	utils/update-img.c	8;"	d	file:
__cow_alloc_section	src/dattobd.c	/^static int __cow_alloc_section(struct cow_manager *cm, unsigned long sect_idx, int zero){$/;"	f	file:
__cow_calculate_allowed_sects	src/dattobd.c	/^static unsigned long __cow_calculate_allowed_sects(unsigned long cache_size, unsigned long total_sects){$/;"	f	file:
__cow_cleanup_mappings	src/dattobd.c	/^static int __cow_cleanup_mappings(struct cow_manager *cm){$/;"	f	file:
__cow_close_header	src/dattobd.c	1824;"	d	file:
__cow_free_section	src/dattobd.c	/^static void __cow_free_section(struct cow_manager *cm, unsigned long sect_idx){$/;"	f	file:
__cow_load_section	src/dattobd.c	/^static int __cow_load_section(struct cow_manager *cm, unsigned long sect_idx){$/;"	f	file:
__cow_open_header	src/dattobd.c	/^static int __cow_open_header(struct cow_manager *cm, int index_only, int reset_vmalloc){$/;"	f	file:
__cow_sync_and_free_sections	src/dattobd.c	/^static int __cow_sync_and_free_sections(struct cow_manager *cm, unsigned long thresh){$/;"	f	file:
__cow_write_current_mapping	src/dattobd.c	2175;"	d	file:
__cow_write_data	src/dattobd.c	/^static int __cow_write_data(struct cow_manager *cm, void *buf){$/;"	f	file:
__cow_write_header	src/dattobd.c	/^static int __cow_write_header(struct cow_manager *cm, int is_clean){$/;"	f	file:
__cow_write_header_dirty	src/dattobd.c	1823;"	d	file:
__cow_write_mapping	src/dattobd.c	/^static int __cow_write_mapping(struct cow_manager *cm, uint64_t pos, uint64_t val){$/;"	f	file:
__cow_write_section	src/dattobd.c	/^static int __cow_write_section(struct cow_manager *cm, unsigned long sect_idx){$/;"	f	file:
__file_unlink	src/dattobd.c	/^static int __file_unlink(struct file *filp, int close, int force){$/;"	f	file:
__handle_bdev_mount_nowrite	src/dattobd.c	/^static int __handle_bdev_mount_nowrite(const struct vfsmount *mnt, unsigned int *idx_out){$/;"	f	file:
__handle_bdev_mount_writable	src/dattobd.c	/^static int __handle_bdev_mount_writable(const char __user *dir_name, const struct block_device *bdev, unsigned int *idx_out){$/;"	f	file:
__init__	tests/kmod.py	/^    def __init__(self, path):$/;"	m	class:Module
__ioctl_setup	src/dattobd.c	/^static int __ioctl_setup(unsigned int minor, const char *bdev_path, const char *cow_path, unsigned long fallocated_space, unsigned long cache_size, unsigned int should_wake_up, int is_snap, int is_reload){$/;"	f	file:
__on_bio_read_complete	src/dattobd.c	/^static void __on_bio_read_complete(struct bio *bio, int err){$/;"	f	file:
__submit_bio_wait_endio	src/dattobd.c	/^static void __submit_bio_wait_endio(struct bio *bio, int error){$/;"	f	file:
__this_module	src/dattobd.mod.c	/^struct module __this_module$/;"	v	typeref:struct:module
__tracer_active_to_dormant	src/dattobd.c	/^static void __tracer_active_to_dormant(struct snap_device *dev){$/;"	f	file:
__tracer_add_ref	src/dattobd.c	/^static int __tracer_add_ref(struct snap_device *dev, int ref_cnt){$/;"	f	file:
__tracer_bioset_exit	src/dattobd.c	/^static inline void __tracer_bioset_exit(struct snap_device *dev){$/;"	f	file:
__tracer_bioset_init	src/dattobd.c	/^static int __tracer_bioset_init(struct snap_device *dev){$/;"	f	file:
__tracer_close	src/dattobd.c	5047;"	d	file:
__tracer_copy_base_dev	src/dattobd.c	/^static void __tracer_copy_base_dev(const struct snap_device *src, struct snap_device *dest){$/;"	f	file:
__tracer_copy_cow	src/dattobd.c	/^static void __tracer_copy_cow(const struct snap_device *src, struct snap_device *dest){$/;"	f	file:
__tracer_copy_cow_path	src/dattobd.c	/^static void __tracer_copy_cow_path(const struct snap_device *src, struct snap_device *dest){$/;"	f	file:
__tracer_destroy_base_dev	src/dattobd.c	/^static void __tracer_destroy_base_dev(struct snap_device *dev){$/;"	f	file:
__tracer_destroy_cow	src/dattobd.c	/^static int __tracer_destroy_cow(struct snap_device *dev, int close_method){$/;"	f	file:
__tracer_destroy_cow_free	src/dattobd.c	3403;"	d	file:
__tracer_destroy_cow_path	src/dattobd.c	/^static void __tracer_destroy_cow_path(struct snap_device *dev){$/;"	f	file:
__tracer_destroy_cow_sync_and_close	src/dattobd.c	3405;"	d	file:
__tracer_destroy_cow_sync_and_free	src/dattobd.c	3404;"	d	file:
__tracer_destroy_cow_thread	src/dattobd.c	/^static void __tracer_destroy_cow_thread(struct snap_device *dev){$/;"	f	file:
__tracer_destroy_snap	src/dattobd.c	/^static void __tracer_destroy_snap(struct snap_device *dev){$/;"	f	file:
__tracer_destroy_tracing	src/dattobd.c	/^static void __tracer_destroy_tracing(struct snap_device *dev){$/;"	f	file:
__tracer_dormant_to_active	src/dattobd.c	/^static void __tracer_dormant_to_active(struct snap_device *dev, const char __user *user_mount_path){$/;"	f	file:
__tracer_init	src/dattobd.c	/^static void __tracer_init(struct snap_device *dev){$/;"	f	file:
__tracer_open	src/dattobd.c	5046;"	d	file:
__tracer_setup_base_dev	src/dattobd.c	/^static int __tracer_setup_base_dev(struct snap_device *dev, const char *bdev_path){$/;"	f	file:
__tracer_setup_cow	src/dattobd.c	/^static int __tracer_setup_cow(struct snap_device *dev, struct block_device *bdev, const char *cow_path, sector_t size, unsigned long fallocated_space, unsigned long cache_size, const uint8_t *uuid, uint64_t seqid, int open_method){$/;"	f	file:
__tracer_setup_cow_new	src/dattobd.c	3479;"	d	file:
__tracer_setup_cow_path	src/dattobd.c	/^static int __tracer_setup_cow_path(struct snap_device *dev, const struct file *cow_file){$/;"	f	file:
__tracer_setup_cow_reload_inc	src/dattobd.c	3481;"	d	file:
__tracer_setup_cow_reload_snap	src/dattobd.c	3480;"	d	file:
__tracer_setup_cow_reopen	src/dattobd.c	3482;"	d	file:
__tracer_setup_cow_thread	src/dattobd.c	/^static int __tracer_setup_cow_thread(struct snap_device *dev, unsigned int minor, int is_snap){$/;"	f	file:
__tracer_setup_inc_cow_thread	src/dattobd.c	3686;"	d	file:
__tracer_setup_snap	src/dattobd.c	/^static int __tracer_setup_snap(struct snap_device *dev, unsigned int minor, struct block_device *bdev, sector_t size){$/;"	f	file:
__tracer_setup_snap_cow_thread	src/dattobd.c	3687;"	d	file:
__tracer_setup_tracing	src/dattobd.c	/^static int __tracer_setup_tracing(struct snap_device *dev, unsigned int minor){$/;"	f	file:
__tracer_setup_tracing_unverified	src/dattobd.c	/^static void __tracer_setup_tracing_unverified(struct snap_device *dev, unsigned int minor){$/;"	f	file:
__tracer_setup_unverified	src/dattobd.c	/^static int __tracer_setup_unverified(struct snap_device *dev, unsigned int minor, const char *bdev_path, const char *cow_path, unsigned long cache_size, int is_snap){$/;"	f	file:
__tracer_should_reset_mrf	src/dattobd.c	/^static int __tracer_should_reset_mrf(const struct snap_device *dev){$/;"	f	file:
__tracer_transition_tracing	src/dattobd.c	/^static int __tracer_transition_tracing(struct snap_device *dev, struct block_device *bdev, make_request_fn *new_mrf, struct snap_device **dev_ptr){$/;"	f	file:
__tracer_unverified_inc_to_active	src/dattobd.c	/^static void __tracer_unverified_inc_to_active(struct snap_device *dev, const char __user *user_mount_path){$/;"	f	file:
__tracer_unverified_snap_to_active	src/dattobd.c	/^static void __tracer_unverified_snap_to_active(struct snap_device *dev, const char __user *user_mount_path){$/;"	f	file:
__used	src/dattobd.mod.c	/^__used$/;"	v	file:
__used	src/dattobd.mod.c	/^__used$/;"	v	typeref:struct:____versions	file:
__verify_bdev_writable	src/dattobd.c	/^static int __verify_bdev_writable(const char *bdev_path, int *out){$/;"	f	file:
__verify_minor	src/dattobd.c	/^static int __verify_minor(unsigned int minor, int mode){$/;"	f	file:
agent_exit	src/dattobd.c	/^module_exit(agent_exit);$/;"	v
agent_exit	src/dattobd.c	/^static void agent_exit(void){$/;"	f	file:
agent_init	src/dattobd.c	/^module_init(agent_init);$/;"	v
agent_init	src/dattobd.c	/^static int __init agent_init(void){$/;"	f	file:
allocated_sects	src/dattobd.c	/^	unsigned long allocated_sects; \/\/number of currently allocated sections$/;"	m	struct:cow_manager	file:
allowed_sects	src/dattobd.c	/^	unsigned long allowed_sects; \/\/the maximum number of sections that may be allocated at once$/;"	m	struct:cow_manager	file:
auto_transition_active	src/dattobd.c	/^static void auto_transition_active(unsigned int i, const char __user *dir_name){$/;"	f	file:
auto_transition_dormant	src/dattobd.c	/^static void auto_transition_dormant(unsigned int i){$/;"	f	file:
bdev	src/dattobd.h	/^	char *bdev; \/\/name of block device to snapshot$/;"	m	struct:reload_params
bdev	src/dattobd.h	/^	char *bdev; \/\/name of block device to snapshot$/;"	m	struct:setup_params
bdev	src/dattobd.h	/^	char bdev[PATH_MAX];$/;"	m	struct:dattobd_info
bdev_is_already_traced	src/dattobd.c	/^static int bdev_is_already_traced(const struct block_device *bdev){$/;"	f	file:
bdev_stack_limits	src/dattobd.c	/^int bdev_stack_limits(struct queue_limits *t, struct block_device *bdev, sector_t start){$/;"	f
bio	src/dattobd.c	/^	struct bio *bio;$/;"	m	struct:bio_sector_map	typeref:struct:bio_sector_map::bio	file:
bio_destructor_snap_dev	src/dattobd.c	/^static void bio_destructor_snap_dev(struct bio *bio){$/;"	f	file:
bio_destructor_tp	src/dattobd.c	/^static void bio_destructor_tp(struct bio *bio){$/;"	f	file:
bio_free_clone	src/dattobd.c	/^static void bio_free_clone(struct bio *bio){$/;"	f	file:
bio_idx	src/dattobd.c	384;"	d	file:
bio_idx	src/dattobd.c	391;"	d	file:
bio_is_discard	src/dattobd.c	261;"	d	file:
bio_is_discard	src/dattobd.c	303;"	d	file:
bio_is_discard	src/dattobd.c	305;"	d	file:
bio_iter_bvec_t	src/dattobd.c	/^	typedef struct bio_vec *bio_iter_bvec_t;$/;"	t	typeref:struct:bio_vec	file:
bio_iter_bvec_t	src/dattobd.c	/^	typedef struct bio_vec bio_iter_bvec_t;$/;"	t	typeref:struct:bio_vec	file:
bio_iter_idx	src/dattobd.c	381;"	d	file:
bio_iter_idx	src/dattobd.c	388;"	d	file:
bio_iter_len	src/dattobd.c	378;"	d	file:
bio_iter_offset	src/dattobd.c	379;"	d	file:
bio_iter_page	src/dattobd.c	380;"	d	file:
bio_iter_t	src/dattobd.c	/^	typedef int bio_iter_t;$/;"	t	file:
bio_iter_t	src/dattobd.c	/^	typedef struct bvec_iter bio_iter_t;$/;"	t	typeref:struct:bvec_iter	file:
bio_last_sector	src/dattobd.c	738;"	d	file:
bio_list	src/dattobd.c	/^struct bio_list {$/;"	s	file:
bio_list_add	src/dattobd.c	/^static inline void bio_list_add(struct bio_list *bl, struct bio *bio){$/;"	f	file:
bio_list_empty	src/dattobd.c	/^static inline int bio_list_empty(const struct bio_list *bl){$/;"	f	file:
bio_list_for_each	src/dattobd.c	47;"	d	file:
bio_list_init	src/dattobd.c	/^static inline void bio_list_init(struct bio_list *bl){$/;"	f	file:
bio_list_pop	src/dattobd.c	/^static inline struct bio *bio_list_pop(struct bio_list *bl){$/;"	f	file:
bio_make_read_clone	src/dattobd.c	/^static int bio_make_read_clone(struct bio_set *bs, struct tracing_params *tp, struct bio *orig_bio, sector_t sect, unsigned int pages, struct bio **bio_out, unsigned int *bytes_added){$/;"	f	file:
bio_needs_cow	src/dattobd.c	/^static int bio_needs_cow(struct bio *bio, struct inode *inode){$/;"	f	file:
bio_overlap	src/dattobd.c	/^static int bio_overlap(const struct bio *bio1, const struct bio *bio2){$/;"	f	file:
bio_queue	src/dattobd.c	/^struct bio_queue{$/;"	s	file:
bio_queue_add	src/dattobd.c	/^static void bio_queue_add(struct bio_queue *bq, struct bio *bio){$/;"	f	file:
bio_queue_dequeue	src/dattobd.c	/^static struct bio *bio_queue_dequeue(struct bio_queue *bq){$/;"	f	file:
bio_queue_dequeue_delay_read	src/dattobd.c	/^static struct bio *bio_queue_dequeue_delay_read(struct bio_queue *bq){$/;"	f	file:
bio_queue_empty	src/dattobd.c	/^static int bio_queue_empty(const struct bio_queue *bq){$/;"	f	file:
bio_queue_init	src/dattobd.c	/^static void bio_queue_init(struct bio_queue *bq){$/;"	f	file:
bio_sector	src/dattobd.c	382;"	d	file:
bio_sector	src/dattobd.c	389;"	d	file:
bio_sector_map	src/dattobd.c	/^struct bio_sector_map{$/;"	s	file:
bio_sects	src/dattobd.c	/^	struct bio_sector_map bio_sects[MAX_CLONES_PER_BIO];$/;"	m	struct:tracing_params	typeref:struct:tracing_params::bio_sector_map	file:
bio_size	src/dattobd.c	383;"	d	file:
bio_size	src/dattobd.c	390;"	d	file:
bios	src/dattobd.c	/^	struct bio_list bios;$/;"	m	struct:bio_queue	typeref:struct:bio_queue::bio_list	file:
bitmap_is_marked	src/dattobd.c	679;"	d	file:
bitmap_mark	src/dattobd.c	680;"	d	file:
blk_set_default_limits	src/dattobd.c	456;"	d	file:
blk_set_stacking_limits	src/dattobd.c	565;"	d	file:
blk_stack_limits	src/dattobd.c	/^int blk_stack_limits(struct request_queue *t, struct request_queue *b, sector_t offset){$/;"	f
blkdev_get_by_path	src/dattobd.c	/^static struct block_device *blkdev_get_by_path(const char *path, fmode_t mode, void *holder){$/;"	f	file:
cache_size	src/dattobd.h	/^	unsigned long cache_size; \/\/maximum cache size (in bytes)$/;"	m	struct:reconfigure_params
cache_size	src/dattobd.h	/^	unsigned long cache_size; \/\/maximum cache size (in bytes)$/;"	m	struct:reload_params
cache_size	src/dattobd.h	/^	unsigned long cache_size; \/\/maximum cache size (in bytes)$/;"	m	struct:setup_params
cache_size	src/dattobd.h	/^	unsigned long cache_size;$/;"	m	struct:dattobd_info
check	dist/initramfs/dracut/module-setup.sh	/^check() {$/;"	f
copy_block	utils/update-img.c	/^static int copy_block(FILE *snap, FILE *img, sector_t block){$/;"	f	file:
copy_string_from_user	src/dattobd.c	/^static int copy_string_from_user(const char __user *data, char **out_ptr){$/;"	f	file:
cow	src/dattobd.h	/^	char *cow; \/\/name of cow file for snapshot$/;"	m	struct:reload_params
cow	src/dattobd.h	/^	char *cow; \/\/name of cow file for snapshot$/;"	m	struct:setup_params
cow	src/dattobd.h	/^	char *cow; \/\/name of cow file for snapshot$/;"	m	struct:transition_snap_params
cow	src/dattobd.h	/^	char cow[PATH_MAX];$/;"	m	struct:dattobd_info
cow_free	src/dattobd.c	/^static void cow_free(struct cow_manager *cm){$/;"	f	file:
cow_free_members	src/dattobd.c	/^static void cow_free_members(struct cow_manager *cm){$/;"	f	file:
cow_header	src/dattobd.h	/^struct cow_header{$/;"	s
cow_init	src/dattobd.c	/^static int cow_init(const char *path, uint64_t elements, unsigned long sect_size, unsigned long cache_size, uint64_t file_max, const uint8_t *uuid, uint64_t seqid, struct cow_manager **cm_out){$/;"	f	file:
cow_manager	src/dattobd.c	/^struct cow_manager{$/;"	s	file:
cow_modify_cache_size	src/dattobd.c	/^static void cow_modify_cache_size(struct cow_manager *cm, unsigned long cache_size){$/;"	f	file:
cow_read_data	src/dattobd.c	/^static int cow_read_data(struct cow_manager *cm, void *buf, uint64_t block_pos, unsigned long block_off, unsigned long len){$/;"	f	file:
cow_read_mapping	src/dattobd.c	/^static int cow_read_mapping(struct cow_manager *cm, uint64_t pos, uint64_t *out){$/;"	f	file:
cow_reload	src/dattobd.c	/^static int cow_reload(const char *path, uint64_t elements, unsigned long sect_size, unsigned long cache_size, int index_only, struct cow_manager **cm_out){$/;"	f	file:
cow_reopen	src/dattobd.c	/^static int cow_reopen(struct cow_manager *cm, const char *pathname){$/;"	f	file:
cow_section	src/dattobd.c	/^struct cow_section{$/;"	s	file:
cow_sync_and_close	src/dattobd.c	/^static int cow_sync_and_close(struct cow_manager *cm){$/;"	f	file:
cow_sync_and_free	src/dattobd.c	/^static int cow_sync_and_free(struct cow_manager *cm){$/;"	f	file:
cow_truncate_to_index	src/dattobd.c	/^static int cow_truncate_to_index(struct cow_manager *cm){$/;"	f	file:
cow_write_current	src/dattobd.c	/^static int cow_write_current(struct cow_manager *cm, uint64_t block, void *buf){$/;"	f	file:
cow_write_filler_mapping	src/dattobd.c	2176;"	d	file:
ctrl_ioctl	src/dattobd.c	/^static long ctrl_ioctl(struct file *filp, unsigned int cmd, unsigned long arg){$/;"	f	file:
curr_pos	src/dattobd.c	/^	uint64_t curr_pos; \/\/current write head position$/;"	m	struct:cow_manager	file:
d_unlinked	src/dattobd.c	/^static inline int d_unlinked(struct dentry *dentry){$/;"	f	file:
data_offset	src/dattobd.c	/^	uint64_t data_offset; \/\/starting offset of data$/;"	m	struct:cow_manager	file:
dattobd	tests/test_destroy.py	/^import dattobd$/;"	i
dattobd	tests/test_setup.py	/^import dattobd$/;"	i
dattobd	tests/test_snapshot.py	/^import dattobd$/;"	i
dattobd	tests/test_transition_incremental.py	/^import dattobd$/;"	i
dattobd_bdev_size	src/dattobd.c	517;"	d	file:
dattobd_bdev_size	src/dattobd.c	519;"	d	file:
dattobd_bdev_stack_limits	src/dattobd.c	/^int dattobd_bdev_stack_limits(struct request_queue *t, struct block_device *bdev, sector_t start){$/;"	f
dattobd_bdev_stack_limits	src/dattobd.c	436;"	d	file:
dattobd_bdev_stack_limits	src/dattobd.c	439;"	d	file:
dattobd_bio_copy_dev	src/dattobd.c	/^static inline void dattobd_bio_copy_dev(struct bio *dst, struct bio *src){$/;"	f	file:
dattobd_bio_endio	src/dattobd.c	/^static void dattobd_bio_endio(struct bio *bio, int err){$/;"	f	file:
dattobd_bio_get_queue	src/dattobd.c	/^static inline struct request_queue *dattobd_bio_get_queue(struct bio *bio){$/;"	f	file:
dattobd_bio_op_clear_flag	src/dattobd.c	/^static inline void dattobd_bio_op_clear_flag(struct bio *bio, unsigned int flag){$/;"	f	file:
dattobd_bio_op_flagged	src/dattobd.c	/^static inline int dattobd_bio_op_flagged(struct bio *bio, unsigned int flag){$/;"	f	file:
dattobd_bio_op_set_flag	src/dattobd.c	/^static inline void dattobd_bio_op_set_flag(struct bio *bio, unsigned int flag){$/;"	f	file:
dattobd_bio_set_dev	src/dattobd.c	/^static inline void dattobd_bio_set_dev(struct bio *bio, struct block_device *bdev){$/;"	f	file:
dattobd_bioset_create	src/dattobd.c	460;"	d	file:
dattobd_bioset_create	src/dattobd.c	462;"	d	file:
dattobd_bioset_create	src/dattobd.c	464;"	d	file:
dattobd_blkdev_put	src/dattobd.c	510;"	d	file:
dattobd_blkdev_put	src/dattobd.c	512;"	d	file:
dattobd_call_mrf	src/dattobd.c	/^static inline int dattobd_call_mrf(make_request_fn *fn, struct request_queue *q, struct bio *bio){$/;"	f	file:
dattobd_cow_fallocate_percentage_default	src/dattobd.c	/^static unsigned int dattobd_cow_fallocate_percentage_default = 10;$/;"	v	file:
dattobd_cow_max_memory_default	src/dattobd.c	/^static unsigned long dattobd_cow_max_memory_default = (300 * 1024 * 1024);$/;"	v	file:
dattobd_d_path	src/dattobd.c	114;"	d	file:
dattobd_d_path	src/dattobd.c	118;"	d	file:
dattobd_debug	src/dattobd.c	/^static int dattobd_debug = 1;$/;"	v	file:
dattobd_destroy	lib/libdattobd.c	/^int dattobd_destroy(unsigned int minor){$/;"	f
dattobd_do_truncate	src/dattobd.c	/^static int dattobd_do_truncate(struct dentry *dentry, loff_t length, unsigned int time_attrs, struct file *filp){$/;"	f	file:
dattobd_drop_super	src/dattobd.c	129;"	d	file:
dattobd_drop_super	src/dattobd.c	132;"	d	file:
dattobd_get_dentry	src/dattobd.c	101;"	d	file:
dattobd_get_dentry	src/dattobd.c	104;"	d	file:
dattobd_get_free_minor	lib/libdattobd.c	/^int dattobd_get_free_minor(void){$/;"	f
dattobd_get_mnt	src/dattobd.c	102;"	d	file:
dattobd_get_mnt	src/dattobd.c	105;"	d	file:
dattobd_get_nd_dentry	src/dattobd.c	115;"	d	file:
dattobd_get_nd_dentry	src/dattobd.c	119;"	d	file:
dattobd_get_nd_mnt	src/dattobd.c	116;"	d	file:
dattobd_get_nd_mnt	src/dattobd.c	120;"	d	file:
dattobd_get_super	src/dattobd.c	128;"	d	file:
dattobd_get_super	src/dattobd.c	131;"	d	file:
dattobd_info	lib/libdattobd.c	/^int dattobd_info(unsigned int minor, struct dattobd_info *info){$/;"	f
dattobd_info	src/dattobd.h	/^struct dattobd_info{$/;"	s
dattobd_inode_lock	src/dattobd.c	/^static inline void dattobd_inode_lock(struct inode *inode){$/;"	f	file:
dattobd_inode_lock	src/dattobd.c	578;"	d	file:
dattobd_inode_unlock	src/dattobd.c	/^static inline void dattobd_inode_unlock(struct inode *inode){$/;"	f	file:
dattobd_inode_unlock	src/dattobd.c	579;"	d	file:
dattobd_kernel_read	src/dattobd.c	/^static inline ssize_t dattobd_kernel_read(struct file *filp, void *buf, size_t count, loff_t *pos){$/;"	f	file:
dattobd_kernel_write	src/dattobd.c	/^static inline ssize_t dattobd_kernel_write(struct file *filp, const void *buf, size_t count, loff_t *pos){$/;"	f	file:
dattobd_lookup_bdev	src/dattobd.c	/^struct block_device *dattobd_lookup_bdev(const char *pathname, fmode_t mode) {$/;"	f
dattobd_max_snap_devices	src/dattobd.c	/^static unsigned int dattobd_max_snap_devices = DATTOBD_DEFAULT_SNAP_DEVICES;$/;"	v	file:
dattobd_may_hook_syscalls	src/dattobd.c	/^static int dattobd_may_hook_syscalls = 1;$/;"	v	file:
dattobd_proc_fops	src/dattobd.c	/^static const struct file_operations dattobd_proc_fops = {$/;"	v	typeref:struct:file_operations	file:
dattobd_proc_get_idx	src/dattobd.c	/^static inline void *dattobd_proc_get_idx(loff_t pos){$/;"	f	file:
dattobd_proc_next	src/dattobd.c	/^static void *dattobd_proc_next(struct seq_file *m, void *v, loff_t *pos){$/;"	f	file:
dattobd_proc_open	src/dattobd.c	/^static int dattobd_proc_open(struct inode *inode, struct file *filp){$/;"	f	file:
dattobd_proc_release	src/dattobd.c	/^static int dattobd_proc_release(struct inode *inode, struct file *file){$/;"	f	file:
dattobd_proc_show	src/dattobd.c	/^static int dattobd_proc_show(struct seq_file *m, void *v){$/;"	f	file:
dattobd_proc_start	src/dattobd.c	/^static void *dattobd_proc_start(struct seq_file *m, loff_t *pos){$/;"	f	file:
dattobd_proc_stop	src/dattobd.c	/^static void dattobd_proc_stop(struct seq_file *m, void *v){$/;"	f	file:
dattobd_reconfigure	lib/libdattobd.c	/^int dattobd_reconfigure(unsigned int minor, unsigned long cache_size){$/;"	f
dattobd_reload_incremental	lib/libdattobd.c	/^int dattobd_reload_incremental(unsigned int minor, char *bdev, char *cow, unsigned long cache_size){$/;"	f
dattobd_reload_snapshot	lib/libdattobd.c	/^int dattobd_reload_snapshot(unsigned int minor, char *bdev, char *cow, unsigned long cache_size){$/;"	f
dattobd_seq_proc_ops	src/dattobd.c	/^static const struct seq_operations dattobd_seq_proc_ops = {$/;"	v	typeref:struct:seq_operations	file:
dattobd_set_bio_ops	src/dattobd.c	/^static inline void dattobd_set_bio_ops(struct bio *bio, req_op_t op, unsigned op_flags){$/;"	f	file:
dattobd_set_bio_ops	src/dattobd.c	258;"	d	file:
dattobd_setup_snapshot	lib/libdattobd.c	/^int dattobd_setup_snapshot(unsigned int minor, char *bdev, char *cow, unsigned long fallocated_space, unsigned long cache_size, unsigned int should_wake_up){$/;"	f
dattobd_should_remove_suid	src/dattobd.c	/^static int dattobd_should_remove_suid(struct dentry *dentry)$/;"	f	file:
dattobd_submit_bio	src/dattobd.c	262;"	d	file:
dattobd_submit_bio	src/dattobd.c	307;"	d	file:
dattobd_submit_bio_wait	src/dattobd.c	263;"	d	file:
dattobd_submit_bio_wait	src/dattobd.c	308;"	d	file:
dattobd_transition_incremental	lib/libdattobd.c	/^int dattobd_transition_incremental(unsigned int minor){$/;"	f
dattobd_transition_snapshot	lib/libdattobd.c	/^int dattobd_transition_snapshot(unsigned int minor, char *cow, unsigned long fallocated_space, unsigned int should_wake_up){$/;"	f
dattobd_wake_up_group	lib/libdattobd.c	/^int dattobd_wake_up_group(void){$/;"	f
dattobd_wake_up_transition_group	lib/libdattobd.c	/^int dattobd_wake_up_transition_group(void){$/;"	f
dd	tests/util.py	/^def dd(ifile, ofile, count, **kwargs):$/;"	f
dentry	src/dattobd.c	/^	struct dentry *dentry;$/;"	m	struct:path	typeref:struct:path::dentry	file:
dentry_get_relative_pathname	src/dattobd.c	/^static int dentry_get_relative_pathname(struct dentry *dentry, char **buf, int *len_res){$/;"	f	file:
depends	dist/initramfs/dracut/module-setup.sh	/^depends() {$/;"	f
destroy	tests/dattobd.py	/^def destroy(minor):$/;"	f
dev	src/dattobd.c	/^	struct snap_device *dev;$/;"	m	struct:tracing_params	typeref:struct:tracing_params::snap_device	file:
dev_bioset	src/dattobd.c	662;"	d	file:
dev_bioset	src/dattobd.c	664;"	d	file:
disable_page_protection	src/dattobd.c	/^static inline void disable_page_protection(unsigned long *cr0) {$/;"	f	file:
dummy	src/configure-tests/feature-tests/__dentry_path.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/bd_super.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/bdev_stack_limits.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/bdops_open_inode.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/bdops_open_int.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/bio_bi_bdev.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/bio_bi_pool.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/bio_bi_remaining.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/bio_endio_1.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/bio_endio_int.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/bio_list.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/bioset_create_3.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/bioset_init.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/bioset_need_bvecs_flag.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/blk_set_default_limits.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/blk_set_stacking_limits.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/blk_status_t.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/blkdev_get_by_path.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/blkdev_put_1.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/bvec_iter.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/bvec_merge_data.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/compound_head.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/d_unlinked.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/dentry_path_raw.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/enum_req_op.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/enum_req_opf.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/file_inode.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/fmode_t.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/fops_fallocate.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/genhd_fl_no_part_scan.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/inode_lock.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/iops_fallocate.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/kern_path.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/kernel_read_ppos.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/kernel_write_ppos.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/make_request_fn_int.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/make_request_fn_void.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/merge_bvec_fn.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/mnt_want_write.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/noop_llseek.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/notify_change_2.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/part_nr_sects_read.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/path_put.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/proc_create.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/sb_start_write.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/struct_path.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/submit_bio_1.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/submit_bio_wait.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/sys_oldumount.c	/^static inline int dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/task_struct_task_works_cb_head.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/task_struct_task_works_hlist.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/thaw_bdev_int.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/uapi_mount_h.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/user_path_at.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/uuid_h.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/vfs_fallocate.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/vfs_unlink_2.c	/^static inline void dummy(void){$/;"	f	file:
dummy	src/configure-tests/feature-tests/vzalloc.c	/^static inline void dummy(void){$/;"	f	file:
dummy_endio	src/configure-tests/feature-tests/bio_endio_int.c	/^static int dummy_endio(struct bio *bio, unsigned int bytes, int err){$/;"	f	file:
dummy_merge_bvec	src/configure-tests/feature-tests/merge_bvec_fn.c	/^static int dummy_merge_bvec(struct request_queue *q, struct bvec_merge_data *bvm, struct bio_vec *bvec){$/;"	f	file:
dummy_mrf	src/configure-tests/feature-tests/make_request_fn_int.c	/^static int dummy_mrf(struct request_queue *q, struct bio *bio){$/;"	f	file:
dummy_mrf	src/configure-tests/feature-tests/make_request_fn_void.c	/^static void dummy_mrf(struct request_queue *q, struct bio *bio){$/;"	f	file:
errno	tests/kmod.py	/^import errno$/;"	i
errno	tests/test_destroy.py	/^import errno$/;"	i
errno	tests/test_setup.py	/^import errno$/;"	i
errno	tests/test_snapshot.py	/^import errno$/;"	i
errno	tests/test_transition_incremental.py	/^import errno$/;"	i
error	src/dattobd.c	/^	int error;$/;"	m	struct:submit_bio_ret	file:
error	src/dattobd.h	/^	int error;$/;"	m	struct:dattobd_info
event	src/dattobd.c	/^	struct completion event;$/;"	m	struct:submit_bio_ret	typeref:struct:submit_bio_ret::completion	file:
event	src/dattobd.c	/^	wait_queue_head_t event;$/;"	m	struct:bio_queue	file:
event	src/dattobd.c	/^	wait_queue_head_t event;$/;"	m	struct:sset_queue	file:
falloc_size	src/dattobd.h	/^	unsigned long long falloc_size;$/;"	m	struct:dattobd_info
fallocated_space	src/dattobd.h	/^	unsigned long fallocated_space; \/\/space allocated to the cow file (in bytes)$/;"	m	struct:transition_snap_params
fallocated_space	src/dattobd.h	/^	unsigned long fallocated_space; \/\/space allocated to the cow file (in megabytes)$/;"	m	struct:setup_params
ffi	tests/dattobd.py	/^ffi = FFI()$/;"	v
file_allocate	src/dattobd.c	/^static int file_allocate(struct file *f, uint64_t offset, uint64_t length){$/;"	f	file:
file_close	src/dattobd.c	/^static inline void file_close(struct file *f){$/;"	f	file:
file_get_absolute_pathname	src/dattobd.c	/^static int file_get_absolute_pathname(const struct file *filp, char **buf, int *len_res){$/;"	f	file:
file_io	src/dattobd.c	/^static int file_io(struct file *filp, int is_write, void *buf, sector_t offset, unsigned long len){$/;"	f	file:
file_is_on_bdev	src/dattobd.c	/^static int file_is_on_bdev(const struct file *file, struct block_device *bdev) {$/;"	f	file:
file_max	src/dattobd.c	/^	uint64_t file_max; \/\/max size of the file before an error is thrown$/;"	m	struct:cow_manager	file:
file_open	src/dattobd.c	/^static int file_open(const char *filename, int flags, struct file **filp){$/;"	f	file:
file_read	src/dattobd.c	1470;"	d	file:
file_truncate	src/dattobd.c	/^static int file_truncate(struct file *filp, loff_t len){$/;"	f	file:
file_unlink	src/dattobd.c	1687;"	d	file:
file_unlink_and_close	src/dattobd.c	1688;"	d	file:
file_unlink_and_close_force	src/dattobd.c	1689;"	d	file:
file_write	src/dattobd.c	1469;"	d	file:
filp	src/dattobd.c	/^	struct file *filp; \/\/the file the cow manager is writing to$/;"	m	struct:cow_manager	typeref:struct:cow_manager::file	file:
find_orig_mrf	src/dattobd.c	/^static int find_orig_mrf(struct block_device *bdev, make_request_fn **mrf){$/;"	f	file:
find_sys_call_table	src/dattobd.c	/^static void **find_sys_call_table(void){$/;"	f	file:
flags	src/dattobd.c	/^	uint32_t flags; \/\/flags representing current state of cow manager$/;"	m	struct:cow_manager	file:
flags	src/dattobd.h	/^	uint32_t flags; \/\/COW file flags$/;"	m	struct:cow_header
fmode_t	src/dattobd.c	/^typedef mode_t fmode_t;$/;"	t	file:
fpos	src/dattobd.h	/^	uint64_t fpos; \/\/current file offset$/;"	m	struct:cow_header
fsize	src/dattobd.h	/^	uint64_t fsize; \/\/file size$/;"	m	struct:cow_header
get_free_minor	src/dattobd.c	/^static int get_free_minor(void)$/;"	f	file:
get_free_minor	tests/dattobd.py	/^def get_free_minor():$/;"	f
get_reconfigure_params	src/dattobd.c	/^static int get_reconfigure_params(const struct reconfigure_params __user *in, unsigned int *minor, unsigned long *cache_size){$/;"	f	file:
get_reload_params	src/dattobd.c	/^static int get_reload_params(const struct reload_params __user *in, unsigned int *minor, char **bdev_name, char **cow_path, unsigned long *cache_size){$/;"	f	file:
get_setup_params	src/dattobd.c	/^static int get_setup_params(const struct setup_params __user *in, unsigned int *minor, char **bdev_name, char **cow_path, unsigned long *fallocated_space, unsigned long *cache_size, unsigned int *should_wake_up){$/;"	f	file:
get_transition_snap_params	src/dattobd.c	/^static int get_transition_snap_params(const struct transition_snap_params __user *in, unsigned int *minor, char **cow_path, unsigned long *fallocated_space){$/;"	f	file:
get_zeroed_pages	src/dattobd.c	671;"	d	file:
handle_bdev_mount_event	src/dattobd.c	/^static int handle_bdev_mount_event(const char __user *dir_name, int follow_flags, unsigned int *idx_out, int mount_writable){$/;"	f	file:
handle_bdev_mount_nowrite	src/dattobd.c	4800;"	d	file:
handle_bdev_mounted_writable	src/dattobd.c	4801;"	d	file:
handle_destroy	app/dbdctl.c	/^static int handle_destroy(int argc, char **argv){$/;"	f	file:
handle_reconfigure	app/dbdctl.c	/^static int handle_reconfigure(int argc, char **argv){$/;"	f	file:
handle_reload_inc	app/dbdctl.c	/^static int handle_reload_inc(int argc, char **argv){$/;"	f	file:
handle_reload_snap	app/dbdctl.c	/^static int handle_reload_snap(int argc, char **argv){$/;"	f	file:
handle_setup_snap	app/dbdctl.c	/^static int handle_setup_snap(int argc, char **argv){$/;"	f	file:
handle_transition_inc	app/dbdctl.c	/^static int handle_transition_inc(int argc, char **argv){$/;"	f	file:
handle_transition_snap	app/dbdctl.c	/^static int handle_transition_snap(int argc, char **argv){$/;"	f	file:
has_data	src/dattobd.c	/^	char has_data; \/\/zero if this section has mappings (on file or in memory)$/;"	m	struct:cow_section	file:
hashlib	tests/util.py	/^import hashlib$/;"	i
head	src/dattobd.c	/^	struct bio *head;$/;"	m	struct:bio_list	typeref:struct:bio_list::bio	file:
head	src/dattobd.c	/^	struct sector_set *head;$/;"	m	struct:sset_list	typeref:struct:sset_list::sector_set	file:
highest_minor	src/dattobd.c	/^static unsigned int highest_minor, lowest_minor;$/;"	v	file:
hook_system_call_table	src/dattobd.c	/^static int hook_system_call_table(void){$/;"	f	file:
inc_handle_sset	src/dattobd.c	/^static int inc_handle_sset(const struct snap_device *dev, struct sector_set *sset){$/;"	f	file:
inc_make_sset	src/dattobd.c	/^static int inc_make_sset(struct snap_device *dev, sector_t sect, unsigned int len){$/;"	f	file:
inc_sset_thread	src/dattobd.c	/^static int inc_sset_thread(void *data){$/;"	f	file:
inc_trace_bio	src/dattobd.c	/^static int inc_trace_bio(struct snap_device *dev, struct bio *bio){$/;"	f	file:
info	tests/dattobd.py	/^def info(minor):$/;"	f
info	tests/kmod.py	/^    def info(self):$/;"	m	class:Module
info_proc	src/dattobd.c	/^static struct proc_dir_entry *info_proc;$/;"	v	typeref:struct:proc_dir_entry	file:
install	dist/initramfs/dracut/module-setup.sh	/^install() {$/;"	f
installkernel	dist/initramfs/dracut/module-setup.sh	/^installkernel() {$/;"	f
ioctl_dattobd_info	src/dattobd.c	/^static int ioctl_dattobd_info(struct dattobd_info *info){$/;"	f	file:
ioctl_destroy	src/dattobd.c	/^static int ioctl_destroy(unsigned int minor){$/;"	f	file:
ioctl_mutex	src/dattobd.c	/^static struct mutex ioctl_mutex;$/;"	v	typeref:struct:mutex	file:
ioctl_reconfigure	src/dattobd.c	/^static int ioctl_reconfigure(unsigned int minor, unsigned long cache_size){$/;"	f	file:
ioctl_reload_inc	src/dattobd.c	4129;"	d	file:
ioctl_reload_snap	src/dattobd.c	4128;"	d	file:
ioctl_setup_snap	src/dattobd.c	4127;"	d	file:
ioctl_transition_inc	src/dattobd.c	/^static int ioctl_transition_inc(unsigned int minor){$/;"	f	file:
ioctl_transition_snap	src/dattobd.c	/^static int ioctl_transition_snap(unsigned int minor, const char *cow_path, unsigned long fallocated_space){$/;"	f	file:
kern_path	src/dattobd.c	/^static int kern_path(const char *name, unsigned int flags, struct path *path){$/;"	f	file:
kmod	tests/devicetestcase.py	/^import kmod$/;"	i
len	src/dattobd.c	/^	unsigned int len;$/;"	m	struct:sector_set	file:
lib	tests/dattobd.py	/^lib = ffi.dlopen("..\/lib\/libdattobd.so")$/;"	v
load	tests/kmod.py	/^    def load(self, **kwargs):$/;"	m	class:Module
lock	src/dattobd.c	/^	spinlock_t lock;$/;"	m	struct:bio_queue	file:
lock	src/dattobd.c	/^	spinlock_t lock;$/;"	m	struct:sset_queue	file:
log_sect_pages	src/dattobd.c	/^	unsigned int log_sect_pages; \/\/log2 of the number of pages needed to store a section$/;"	m	struct:cow_manager	file:
loop_create	tests/util.py	/^def loop_create(loop, path):$/;"	f
loop_destroy	tests/util.py	/^def loop_destroy(loop):$/;"	f
lowest_minor	src/dattobd.c	/^static unsigned int highest_minor, lowest_minor;$/;"	v	file:
magic	src/dattobd.h	/^	uint32_t magic; \/\/COW header magic$/;"	m	struct:cow_header
main	app/dbdctl.c	/^int main(int argc, char **argv){$/;"	f
main	utils/update-img.c	/^int main(int argc, char **argv){$/;"	f
major	src/dattobd.c	/^static int major;$/;"	v	file:
mappings	src/dattobd.c	/^	uint64_t *mappings; \/\/array of block addresses$/;"	m	struct:cow_section	file:
md5sum	tests/util.py	/^def md5sum(path):$/;"	f
min_not_zero	src/dattobd.c	408;"	d	file:
minor	src/dattobd.h	/^	unsigned int minor; \/\/requested minor number of the device$/;"	m	struct:reconfigure_params
minor	src/dattobd.h	/^	unsigned int minor; \/\/requested minor number of the device$/;"	m	struct:reload_params
minor	src/dattobd.h	/^	unsigned int minor; \/\/requested minor number of the device$/;"	m	struct:setup_params
minor	src/dattobd.h	/^	unsigned int minor; \/\/requested minor$/;"	m	struct:transition_snap_params
minor	src/dattobd.h	/^	unsigned int minor;$/;"	m	struct:dattobd_info
minor_range_include	src/dattobd.c	/^static void minor_range_include(unsigned int minor){$/;"	f	file:
minor_range_recalculate	src/dattobd.c	/^static void minor_range_recalculate(void){$/;"	f	file:
mkfs	tests/util.py	/^def mkfs(device):$/;"	f
mnt	src/dattobd.c	/^	struct vfsmount *mnt;$/;"	m	struct:path	typeref:struct:path::vfsmount	file:
mnt_drop_write	src/dattobd.c	397;"	d	file:
mnt_want_write	src/dattobd.c	396;"	d	file:
mount	tests/util.py	/^def mount(device, path, opts=None):$/;"	f
mount_hook	src/dattobd.c	/^static asmlinkage long mount_hook(char __user *dev_name, char __user *dir_name, char __user *type, unsigned long flags, void __user *data){$/;"	f	file:
next	src/dattobd.c	/^	struct sector_set *next;$/;"	m	struct:sector_set	typeref:struct:sector_set::sector_set	file:
noop_llseek	src/dattobd.c	/^static loff_t noop_llseek(struct file *file, loff_t offset, int origin){$/;"	f	file:
nr_changed_blocks	src/dattobd.c	/^	uint64_t nr_changed_blocks; \/\/number of changed blocks since last snapshot$/;"	m	struct:cow_manager	file:
nr_changed_blocks	src/dattobd.h	/^	uint64_t nr_changed_blocks; \/\/number of changed blocks since last snapshot$/;"	m	struct:cow_header
nr_changed_blocks	src/dattobd.h	/^	unsigned long long nr_changed_blocks;$/;"	m	struct:dattobd_info
obj-m	src/Makefile	/^obj-m := dattobd.o$/;"	m
obj-m	src/configure-tests/feature-tests/Makefile	/^obj-m := $(OBJ)$/;"	m
oldumount_hook	src/dattobd.c	/^static asmlinkage long oldumount_hook(char __user *name){$/;"	f	file:
on_bio_read_complete	src/dattobd.c	/^static int on_bio_read_complete(struct bio *bio, unsigned int bytes, int err){$/;"	f	file:
on_bio_read_complete	src/dattobd.c	/^static void on_bio_read_complete(struct bio *bio){$/;"	f	file:
on_bio_read_complete	src/dattobd.c	/^static void on_bio_read_complete(struct bio *bio, int err){$/;"	f	file:
orig_bio	src/dattobd.c	/^	struct bio *orig_bio;$/;"	m	struct:tracing_params	typeref:struct:tracing_params::bio	file:
orig_mount	src/dattobd.c	/^static asmlinkage long (*orig_mount)(char __user *, char __user *, char __user *, unsigned long, void __user *);$/;"	v	file:
orig_oldumount	src/dattobd.c	/^static asmlinkage long (*orig_oldumount)(char __user *);$/;"	v	file:
orig_umount	src/dattobd.c	/^static asmlinkage long (*orig_umount)(char __user *, int);$/;"	v	file:
os	tests/devicetestcase.py	/^import os$/;"	i
os	tests/kmod.py	/^import os$/;"	i
os	tests/test_destroy.py	/^import os$/;"	i
os	tests/test_setup.py	/^import os$/;"	i
os	tests/test_snapshot.py	/^import os$/;"	i
os	tests/test_transition_incremental.py	/^import os$/;"	i
page_get_inode	src/dattobd.c	/^static inline struct inode *page_get_inode(struct page *pg){$/;"	f	file:
parse_ui	app/dbdctl.c	/^static int parse_ui(const char *str, unsigned int *out){$/;"	f	file:
parse_ul	app/dbdctl.c	/^static int parse_ul(const char *str, unsigned long *out){$/;"	f	file:
path	src/dattobd.c	/^struct path {$/;"	s	file:
path_get_absolute_pathname	src/dattobd.c	/^static int path_get_absolute_pathname(const struct path *path, char **buf, int *len_res){$/;"	f	file:
path_put	src/dattobd.c	/^void path_put(const struct path *path) {$/;"	f
pathname_concat	src/dattobd.c	/^static int pathname_concat(const char *pathname1, const char *pathname2, char **path_out){$/;"	f	file:
pathname_to_absolute	src/dattobd.c	/^static int pathname_to_absolute(const char *pathname, char **buf, int *len_res){$/;"	f	file:
post_umount_check	src/dattobd.c	/^static void post_umount_check(int dormant_ret, long umount_ret, unsigned int idx, const char __user *dir_name){$/;"	f	file:
prereqs	dist/initramfs/initramfs-tools/hooks/dattobd	/^prereqs()$/;"	f
prereqs	dist/initramfs/initramfs-tools/scripts/dattobd	/^prereqs()$/;"	f
print_help	app/dbdctl.c	/^static void print_help(int status){$/;"	f	file:
print_help	utils/update-img.c	/^static void print_help(char* progname, int status){$/;"	f	file:
proc_create	src/dattobd.c	/^static inline struct proc_dir_entry *proc_create(const char *name, mode_t mode, struct proc_dir_entry *parent, const struct file_operations *proc_fops){$/;"	f	file:
real_fallocate	src/dattobd.c	/^static int real_fallocate(struct file *f, uint64_t offset, uint64_t length){$/;"	f	file:
real_fallocate	src/dattobd.c	1541;"	d	file:
reconfigure	tests/dattobd.py	/^def reconfigure(minor, cache_size):$/;"	f
reconfigure_params	src/dattobd.h	/^struct reconfigure_params{$/;"	s
reenable_page_protection	src/dattobd.c	/^static inline void reenable_page_protection(unsigned long *cr0) {$/;"	f	file:
refs	src/dattobd.c	/^	atomic_t refs;$/;"	m	struct:tracing_params	file:
reload_incremental	tests/dattobd.py	/^def reload_incremental(minor, device, cow_file, cache_size=0):$/;"	f
reload_params	src/dattobd.h	/^struct reload_params{$/;"	s
reload_snapshot	tests/dattobd.py	/^def reload_snapshot(minor, device, cow_file, cache_size=0):$/;"	f
req_op	src/dattobd.c	/^typedef enum req_op {$/;"	g	file:
req_op_t	src/dattobd.c	/^	typedef enum req_op req_op_t;$/;"	t	typeref:enum:req_op	file:
req_op_t	src/dattobd.c	/^typedef enum req_op req_op_t;$/;"	t	typeref:enum:req_op	file:
req_op_t	src/dattobd.c	/^typedef enum req_opf req_op_t;$/;"	t	typeref:enum:req_opf	file:
req_op_t	src/dattobd.c	/^} req_op_t;$/;"	t	typeref:enum:req_op	file:
restore_syscall	src/dattobd.c	4986;"	d	file:
restore_system_call_table	src/dattobd.c	/^static void restore_system_call_table(void){$/;"	f	file:
run_one_test	src/genconfig.sh	/^run_one_test() {$/;"	f
sd_base_dev	src/dattobd.c	/^	struct block_device *sd_base_dev; \/\/device being snapshot$/;"	m	struct:snap_device	typeref:struct:snap_device::block_device	file:
sd_bdev_path	src/dattobd.c	/^	char *sd_bdev_path; \/\/base device file path$/;"	m	struct:snap_device	file:
sd_bioset	src/dattobd.c	/^	struct bio_set *sd_bioset; \/\/allocation pool for bios$/;"	m	struct:snap_device	typeref:struct:snap_device::bio_set	file:
sd_bioset	src/dattobd.c	/^	struct bio_set sd_bioset; \/\/allocation pool for bios$/;"	m	struct:snap_device	typeref:struct:snap_device::bio_set	file:
sd_cache_size	src/dattobd.c	/^	unsigned long sd_cache_size; \/\/maximum cache size (in bytes)$/;"	m	struct:snap_device	file:
sd_cow	src/dattobd.c	/^	struct cow_manager *sd_cow; \/\/cow manager$/;"	m	struct:snap_device	typeref:struct:snap_device::cow_manager	file:
sd_cow_bios	src/dattobd.c	/^	struct bio_queue sd_cow_bios; \/\/list of outstanding cow bios$/;"	m	struct:snap_device	typeref:struct:snap_device::bio_queue	file:
sd_cow_inode	src/dattobd.c	/^	struct inode *sd_cow_inode; \/\/cow file inode$/;"	m	struct:snap_device	typeref:struct:snap_device::inode	file:
sd_cow_path	src/dattobd.c	/^	char *sd_cow_path; \/\/cow file path$/;"	m	struct:snap_device	file:
sd_cow_thread	src/dattobd.c	/^	struct task_struct *sd_cow_thread; \/\/thread for handling file read\/writes$/;"	m	struct:snap_device	typeref:struct:snap_device::task_struct	file:
sd_fail_code	src/dattobd.c	/^	atomic_t sd_fail_code; \/\/failure return code$/;"	m	struct:snap_device	file:
sd_falloc_size	src/dattobd.c	/^	unsigned long sd_falloc_size; \/\/space allocated to the cow file (in megabytes)$/;"	m	struct:snap_device	file:
sd_gd	src/dattobd.c	/^	struct gendisk *sd_gd; \/\/snap device gendisk$/;"	m	struct:snap_device	typeref:struct:snap_device::gendisk	file:
sd_minor	src/dattobd.c	/^	unsigned int sd_minor; \/\/minor number of the snapshot$/;"	m	struct:snap_device	file:
sd_mrf_thread	src/dattobd.c	/^	struct task_struct *sd_mrf_thread; \/\/thread for handling file read\/writes$/;"	m	struct:snap_device	typeref:struct:snap_device::task_struct	file:
sd_orig_bios	src/dattobd.c	/^	struct bio_queue sd_orig_bios; \/\/list of outstanding original bios$/;"	m	struct:snap_device	typeref:struct:snap_device::bio_queue	file:
sd_orig_mrf	src/dattobd.c	/^	make_request_fn *sd_orig_mrf; \/\/block device's original make request function$/;"	m	struct:snap_device	file:
sd_pending_ssets	src/dattobd.c	/^	struct sset_queue sd_pending_ssets; \/\/list of outstanding sector sets$/;"	m	struct:snap_device	typeref:struct:snap_device::sset_queue	file:
sd_queue	src/dattobd.c	/^	struct request_queue *sd_queue; \/\/snap device request queue$/;"	m	struct:snap_device	typeref:struct:snap_device::request_queue	file:
sd_received_cnt	src/dattobd.c	/^	atomic64_t sd_received_cnt; \/\/count of read clones submitted to underlying driver$/;"	m	struct:snap_device	file:
sd_refs	src/dattobd.c	/^	atomic_t sd_refs; \/\/number of users who have this device open$/;"	m	struct:snap_device	file:
sd_sect_off	src/dattobd.c	/^	sector_t sd_sect_off; \/\/starting sector of base block device$/;"	m	struct:snap_device	file:
sd_size	src/dattobd.c	/^	sector_t sd_size; \/\/size of device in sectors$/;"	m	struct:snap_device	file:
sd_state	src/dattobd.c	/^	unsigned long sd_state; \/\/current state of the snapshot$/;"	m	struct:snap_device	file:
sd_submitted_cnt	src/dattobd.c	/^	atomic64_t sd_submitted_cnt; \/\/count of read clones submitted to underlying driver$/;"	m	struct:snap_device	file:
sect	src/dattobd.c	/^	sector_t sect;$/;"	m	struct:bio_sector_map	file:
sect	src/dattobd.c	/^	sector_t sect;$/;"	m	struct:sector_set	file:
sect_size	src/dattobd.c	/^	unsigned long sect_size; \/\/size of a section in number of elements it can contain$/;"	m	struct:cow_manager	file:
sector_set	src/dattobd.c	/^struct sector_set{$/;"	s	file:
sector_t	utils/update-img.c	/^typedef unsigned long long sector_t;$/;"	t	file:
sects	src/dattobd.c	/^	struct cow_section *sects; \/\/pointer to the array of sections of mappings$/;"	m	struct:cow_manager	typeref:struct:cow_manager::cow_section	file:
seqid	src/dattobd.c	/^	uint64_t seqid; \/\/sequence id, increments on each transition to snapshot mode$/;"	m	struct:cow_manager	file:
seqid	src/dattobd.h	/^	uint64_t seqid; \/\/seqential id of snapshot (starts at 1)$/;"	m	struct:cow_header
seqid	src/dattobd.h	/^	unsigned long long seqid;$/;"	m	struct:dattobd_info
setUp	tests/test_destroy.py	/^    def setUp(self):$/;"	m	class:TestDestroy
setUp	tests/test_setup.py	/^    def setUp(self):$/;"	m	class:TestSetup
setUp	tests/test_snapshot.py	/^    def setUp(self):$/;"	m	class:TestSnapshot
setUp	tests/test_transition_incremental.py	/^    def setUp(self):$/;"	m	class:TestTransitionToIncremental
setUpClass	tests/devicetestcase.py	/^    def setUpClass(cls):$/;"	m	class:DeviceTestCase
set_syscall	src/dattobd.c	4982;"	d	file:
settle	tests/util.py	/^def settle(timeout=20):$/;"	f
setup	tests/dattobd.py	/^def setup(minor, device, cow_file, fallocated_space=0, cache_size=0):$/;"	f
setup_params	src/dattobd.h	/^struct setup_params{$/;"	s
should_wake_up	src/dattobd.h	/^	unsigned int should_wake_up;$/;"	m	struct:setup_params
should_wake_up	src/dattobd.h	/^	unsigned int should_wake_up;$/;"	m	struct:transition_snap_params
should_wake_up_snap_devices	src/dattobd.c	/^static struct snap_device **snap_devices, **should_wake_up_snap_devices;$/;"	v	typeref:struct:	file:
size	src/dattobd.c	/^	unsigned int size;$/;"	m	struct:bio_sector_map	file:
snap_control_device	src/dattobd.c	/^static struct miscdevice snap_control_device = {$/;"	v	typeref:struct:miscdevice	file:
snap_control_fops	src/dattobd.c	/^static const struct file_operations snap_control_fops = {$/;"	v	typeref:struct:file_operations	file:
snap_cow_thread	src/dattobd.c	/^static int snap_cow_thread(void *data){$/;"	f	file:
snap_device	src/dattobd.c	/^struct snap_device{$/;"	s	file:
snap_devices	src/dattobd.c	/^static struct snap_device **snap_devices, **should_wake_up_snap_devices;$/;"	v	typeref:struct:snap_device	file:
snap_handle_read_bio	src/dattobd.c	/^static int snap_handle_read_bio(const struct snap_device *dev, struct bio *bio){$/;"	f	file:
snap_handle_write_bio	src/dattobd.c	/^static int snap_handle_write_bio(const struct snap_device *dev, struct bio *bio){$/;"	f	file:
snap_merge_bvec	src/dattobd.c	/^static int snap_merge_bvec(struct request_queue *q, struct bio *bio_bvm, struct bio_vec *bvec){$/;"	f	file:
snap_merge_bvec	src/dattobd.c	/^static int snap_merge_bvec(struct request_queue *q, struct bvec_merge_data *bvm, struct bio_vec *bvec){$/;"	f	file:
snap_mrf	src/dattobd.c	/^static MRF_RETURN_TYPE snap_mrf(struct request_queue *q, struct bio *bio){$/;"	f	file:
snap_mrf_thread	src/dattobd.c	/^static int snap_mrf_thread(void *data){$/;"	f	file:
snap_open	src/configure-tests/feature-tests/bdops_open_inode.c	/^static int snap_open(struct inode *inode, struct file *filp){$/;"	f	file:
snap_open	src/configure-tests/feature-tests/bdops_open_int.c	/^static int snap_open(struct block_device *bdev, fmode_t mode){$/;"	f	file:
snap_open	src/dattobd.c	/^static int snap_open(struct block_device *bdev, fmode_t mode){$/;"	f	file:
snap_open	src/dattobd.c	/^static int snap_open(struct inode *inode, struct file *filp){$/;"	f	file:
snap_ops	src/dattobd.c	/^static const struct block_device_operations snap_ops = {$/;"	v	typeref:struct:block_device_operations	file:
snap_read_bio_get_mode	src/dattobd.c	/^static int snap_read_bio_get_mode(const struct snap_device *dev, struct bio *bio, int *mode){$/;"	f	file:
snap_release	src/configure-tests/feature-tests/bdops_open_inode.c	/^static int snap_release(struct inode *inode, struct file *filp){$/;"	f	file:
snap_release	src/configure-tests/feature-tests/bdops_open_int.c	/^static int snap_release(struct gendisk *gd, fmode_t mode){$/;"	f	file:
snap_release	src/dattobd.c	/^static int snap_release(struct gendisk *gd, fmode_t mode){$/;"	f	file:
snap_release	src/dattobd.c	/^static int snap_release(struct inode *inode, struct file *filp){$/;"	f	file:
snap_release	src/dattobd.c	/^static void snap_release(struct gendisk *gd, fmode_t mode){$/;"	f	file:
snap_trace_bio	src/dattobd.c	/^static int snap_trace_bio(struct snap_device *dev, struct bio *bio){$/;"	f	file:
sset_list	src/dattobd.c	/^struct sset_list{$/;"	s	file:
sset_list_add	src/dattobd.c	/^static void sset_list_add(struct sset_list *sl, struct sector_set *sset){$/;"	f	file:
sset_list_empty	src/dattobd.c	/^static inline int sset_list_empty(const struct sset_list *sl){$/;"	f	file:
sset_list_init	src/dattobd.c	/^static inline void sset_list_init(struct sset_list *sl){$/;"	f	file:
sset_list_pop	src/dattobd.c	/^static struct sector_set *sset_list_pop(struct sset_list *sl){$/;"	f	file:
sset_queue	src/dattobd.c	/^struct sset_queue{$/;"	s	file:
sset_queue_add	src/dattobd.c	/^static void sset_queue_add(struct sset_queue *sq, struct sector_set *sset){$/;"	f	file:
sset_queue_dequeue	src/dattobd.c	/^static struct sector_set *sset_queue_dequeue(struct sset_queue *sq){$/;"	f	file:
sset_queue_empty	src/dattobd.c	/^static int sset_queue_empty(const struct sset_queue *sq){$/;"	f	file:
sset_queue_init	src/dattobd.c	/^static void sset_queue_init(struct sset_queue *sq){$/;"	f	file:
ssets	src/dattobd.c	/^	struct sset_list ssets;$/;"	m	struct:sset_queue	typeref:struct:sset_queue::sset_list	file:
state	src/dattobd.h	/^	unsigned long state;$/;"	m	struct:dattobd_info
submit_bio_ret	src/dattobd.c	/^struct submit_bio_ret{$/;"	s	file:
submit_bio_wait	src/dattobd.c	/^static int submit_bio_wait(int rw, struct bio *bio){$/;"	f	file:
submit_bio_wait_endio	src/dattobd.c	/^static int submit_bio_wait_endio(struct bio *bio, unsigned int bytes, int error){$/;"	f	file:
submit_bio_wait_endio	src/dattobd.c	/^static void submit_bio_wait_endio(struct bio *bio, int error){$/;"	f	file:
subprocess	tests/kmod.py	/^import subprocess$/;"	i
subprocess	tests/util.py	/^import subprocess$/;"	i
system_call_table	src/dattobd.c	/^static void **system_call_table = NULL;$/;"	v	file:
tail	src/dattobd.c	/^	struct bio *tail;$/;"	m	struct:bio_list	typeref:struct:bio_list::bio	file:
tail	src/dattobd.c	/^	struct sector_set *tail;$/;"	m	struct:sset_list	typeref:struct:sset_list::sector_set	file:
task_work_flush	src/dattobd.c	/^static void task_work_flush(void){$/;"	f	file:
task_work_flush	src/dattobd.c	1196;"	d	file:
tearDownClass	tests/devicetestcase.py	/^    def tearDownClass(cls):$/;"	m	class:DeviceTestCase
test_destroy_active_incremental	tests/test_destroy.py	/^    def test_destroy_active_incremental(self):$/;"	m	class:TestDestroy
test_destroy_active_snapshot	tests/test_destroy.py	/^    def test_destroy_active_snapshot(self):$/;"	m	class:TestDestroy
test_destroy_dormant_incremental	tests/test_destroy.py	/^    def test_destroy_dormant_incremental(self):$/;"	m	class:TestDestroy
test_destroy_dormant_snapshot	tests/test_destroy.py	/^    def test_destroy_dormant_snapshot(self):$/;"	m	class:TestDestroy
test_destroy_nonexistent_device	tests/test_destroy.py	/^    def test_destroy_nonexistent_device(self):$/;"	m	class:TestDestroy
test_destroy_unverified_incremental	tests/test_destroy.py	/^    def test_destroy_unverified_incremental(self):$/;"	m	class:TestDestroy
test_destroy_unverified_snapshot	tests/test_destroy.py	/^    def test_destroy_unverified_snapshot(self):$/;"	m	class:TestDestroy
test_modify_origin	tests/test_snapshot.py	/^    def test_modify_origin(self):$/;"	m	class:TestSnapshot
test_next_available_minor	tests/test_snapshot.py	/^    def test_next_available_minor(self):$/;"	m	class:TestSnapshot
test_setup_already_tracked_volume	tests/test_setup.py	/^    def test_setup_already_tracked_volume(self):$/;"	m	class:TestSetup
test_setup_cow_file_on_wrong_device	tests/test_setup.py	/^    def test_setup_cow_file_on_wrong_device(self):$/;"	m	class:TestSetup
test_setup_cow_file_path_is_dir	tests/test_setup.py	/^    def test_setup_cow_file_path_is_dir(self):$/;"	m	class:TestSetup
test_setup_invalid_minor	tests/test_setup.py	/^    def test_setup_invalid_minor(self):$/;"	m	class:TestSetup
test_setup_readonly_volume	tests/test_setup.py	/^    def test_setup_readonly_volume(self):$/;"	m	class:TestSetup
test_setup_unmounted_volume	tests/test_setup.py	/^    def test_setup_unmounted_volume(self):$/;"	m	class:TestSetup
test_setup_volume	tests/test_setup.py	/^    def test_setup_volume(self):$/;"	m	class:TestSetup
test_setup_volume_path_is_dir	tests/test_setup.py	/^    def test_setup_volume_path_is_dir(self):$/;"	m	class:TestSetup
test_track_writes	tests/test_snapshot.py	/^    def test_track_writes(self):$/;"	m	class:TestSnapshot
test_transition_active_incremental	tests/test_transition_incremental.py	/^    def test_transition_active_incremental(self):$/;"	m	class:TestTransitionToIncremental
test_transition_active_snapshot	tests/test_transition_incremental.py	/^    def test_transition_active_snapshot(self):$/;"	m	class:TestTransitionToIncremental
test_transition_fs_sync_cow_full	tests/test_transition_incremental.py	/^    def test_transition_fs_sync_cow_full(self):$/;"	m	class:TestTransitionToIncremental
test_transition_mod_sync_cow_full	tests/test_transition_incremental.py	/^    def test_transition_mod_sync_cow_full(self):$/;"	m	class:TestTransitionToIncremental
test_transition_nonexistent_snapshot	tests/test_transition_incremental.py	/^    def test_transition_nonexistent_snapshot(self):$/;"	m	class:TestTransitionToIncremental
total_sects	src/dattobd.c	/^	unsigned long total_sects; \/\/total sections the cm log represents$/;"	m	struct:cow_manager	file:
tp_alloc	src/dattobd.c	/^static int tp_alloc(struct snap_device *dev, struct bio *bio, struct tracing_params **tp_out){$/;"	f	file:
tp_get	src/dattobd.c	/^static void tp_get(struct tracing_params *tp){$/;"	f	file:
tp_put	src/dattobd.c	/^static void tp_put(struct tracing_params *tp){$/;"	f	file:
tracer_active_inc_to_snap	src/dattobd.c	/^static int tracer_active_inc_to_snap(struct snap_device *old_dev, const char *cow_path, unsigned long fallocated_space, unsigned int should_wake_up){$/;"	f	file:
tracer_active_snap_to_inc	src/dattobd.c	/^static int tracer_active_snap_to_inc(struct snap_device *old_dev){$/;"	f	file:
tracer_alloc	src/dattobd.c	/^static int tracer_alloc(struct snap_device **dev_ptr){$/;"	f	file:
tracer_dattobd_info	src/dattobd.c	/^static void tracer_dattobd_info(const struct snap_device *dev, struct dattobd_info *info){$/;"	f	file:
tracer_destroy	src/dattobd.c	/^static void tracer_destroy(struct snap_device *dev){$/;"	f	file:
tracer_for_each	src/dattobd.c	692;"	d	file:
tracer_for_each_full	src/dattobd.c	693;"	d	file:
tracer_queue_matches_bio	src/dattobd.c	696;"	d	file:
tracer_read_fail_state	src/dattobd.c	/^static inline int tracer_read_fail_state(const struct snap_device *dev){$/;"	f	file:
tracer_reconfigure	src/dattobd.c	/^static void tracer_reconfigure(struct snap_device *dev, unsigned long cache_size){$/;"	f	file:
tracer_sector_matches_bio	src/dattobd.c	699;"	d	file:
tracer_set_fail_state	src/dattobd.c	/^static inline void tracer_set_fail_state(struct snap_device *dev, int error){$/;"	f	file:
tracer_setup_active_snap	src/dattobd.c	/^static int tracer_setup_active_snap(struct snap_device *dev, unsigned int minor, const char *bdev_path, const char *cow_path, unsigned long fallocated_space, unsigned long cache_size, unsigned int should_wake_up){$/;"	f	file:
tracer_setup_unverified_inc	src/dattobd.c	3841;"	d	file:
tracer_setup_unverified_snap	src/dattobd.c	3842;"	d	file:
tracer_should_trace_bio	src/dattobd.c	703;"	d	file:
tracing_mrf	src/dattobd.c	/^static MRF_RETURN_TYPE tracing_mrf(struct request_queue *q, struct bio *bio){$/;"	f	file:
tracing_params	src/dattobd.c	/^struct tracing_params{$/;"	s	file:
transition_snap_params	src/dattobd.h	/^struct transition_snap_params{$/;"	s
transition_to_incremental	tests/dattobd.py	/^def transition_to_incremental(minor):$/;"	f
transition_to_snapshot	tests/dattobd.py	/^def transition_to_snapshot(minor, cow_file, fallocated_space=0):$/;"	f
umount_hook	src/dattobd.c	/^static asmlinkage long umount_hook(char __user *name, int flags){$/;"	f	file:
unittest	tests/devicetestcase.py	/^import unittest$/;"	i
unittest	tests/test_destroy.py	/^import unittest$/;"	i
unittest	tests/test_setup.py	/^import unittest$/;"	i
unittest	tests/test_snapshot.py	/^import unittest$/;"	i
unittest	tests/test_transition_incremental.py	/^import unittest$/;"	i
unload	tests/kmod.py	/^    def unload(self):$/;"	m	class:Module
unmount	tests/util.py	/^def unmount(path):$/;"	f
usage	src/dattobd.c	/^	unsigned long usage; \/\/counter that keeps track of how often this section is used$/;"	m	struct:cow_section	file:
user_mount_pathname_concat	src/dattobd.c	/^static int user_mount_pathname_concat(const char __user *user_mount_path, const char *rel_path, char **path_out){$/;"	f	file:
user_path_at	src/dattobd.c	/^int user_path_at(int dfd, const char __user *name, unsigned flags, struct path *path) {$/;"	f
util	tests/dattobd.py	/^import util$/;"	i
util	tests/devicetestcase.py	/^import util$/;"	i
util	tests/test_destroy.py	/^import util$/;"	i
util	tests/test_setup.py	/^import util$/;"	i
util	tests/test_snapshot.py	/^import util$/;"	i
util	tests/test_transition_incremental.py	/^import util$/;"	i
uuid	src/dattobd.c	/^	uint8_t uuid[COW_UUID_SIZE]; \/\/uuid for this series of snaphots$/;"	m	struct:cow_manager	file:
uuid	src/dattobd.h	/^	char uuid[COW_UUID_SIZE];$/;"	m	struct:dattobd_info
uuid	src/dattobd.h	/^	uint8_t uuid[COW_UUID_SIZE]; \/\/uuid for this series of snapshots$/;"	m	struct:cow_header
verify_files	utils/update-img.c	/^static int verify_files(FILE *cow, unsigned minor){$/;"	f	file:
verify_minor_available	src/dattobd.c	4048;"	d	file:
verify_minor_in_use	src/dattobd.c	4050;"	d	file:
verify_minor_in_use_not_busy	src/dattobd.c	4049;"	d	file:
version	src/dattobd.c	/^	uint64_t version; \/\/version of cow file format$/;"	m	struct:cow_manager	file:
version	src/dattobd.h	/^	uint64_t version; \/\/version of cow file format$/;"	m	struct:cow_header
version	src/dattobd.h	/^	unsigned long long version;$/;"	m	struct:dattobd_info
version	tests/dattobd.py	/^def version():$/;"	f
vzalloc	src/dattobd.c	523;"	d	file:
wake_up	app/dbdctl.c	/^static int wake_up(){$/;"	f	file:
wake_up_group	src/dattobd.c	/^static int wake_up_group(void)$/;"	f	file:
wake_up_transition	app/dbdctl.c	/^static int wake_up_transition(){$/;"	f	file:
wake_up_transition_group	src/dattobd.c	/^static int wake_up_transition_group(void)$/;"	f	file:
