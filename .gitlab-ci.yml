image: registry.openshift.datto.net/devops/centos-obs-scratch:latest

variables:
  OBS_PROJECT: "home:mswitala_datto"
  OBS_PACKAGE: "dattobd"
  OBS_TARGET_DISTRO: "null"

before_script:
  - cd ..; tar -c -z --exclude-vcs -v -f ${CI_PROJECT_NAME}.tar.gz ${CI_PROJECT_NAME}; cd $CI_PROJECT_NAME
  - export PARENT_VERSION=$(rpmspec -q --srpm --qf '%{version}' dist/${CI_PROJECT_NAME}.spec)

obsscratch_CentOS_8:
    stage: build
    variables:
        OBS_TARGET_DISTRO: "CentOS_8"
    script:
        - obsctl scratchbuild -f ../${CI_PROJECT_NAME}.tar.gz -o $CI_PROJECT_NAMESPACE -n $CI_PROJECT_NAME -t $PARENT_VERSION -R $CI_COMMIT_SHA -B $CI_COMMIT_REF_NAME -s $OBS_PROJECT -p $OBS_PACKAGE -T git -d $OBS_TARGET_DISTRO -im
        - cp -a scratchbuild-*/home/abuild/rpmbuild/RPMS/*/*.rpm .
    artifacts:
        when: on_success
        paths:
            - ${SOURCE_NAME}*.rpm
    only:
        - branches
    tags:
        - docker

obsscratch_CentOS_9:
    stage: build
    variables:
        OBS_TARGET_DISTRO: "CentOS_9"
    script:
        - obsctl scratchbuild -f ../${CI_PROJECT_NAME}.tar.gz -o $CI_PROJECT_NAMESPACE -n $CI_PROJECT_NAME -t $PARENT_VERSION -R $CI_COMMIT_SHA -B $CI_COMMIT_REF_NAME -s $OBS_PROJECT -p $OBS_PACKAGE -T git -d $OBS_TARGET_DISTRO -im
        - cp -a scratchbuild-*/home/abuild/rpmbuild/RPMS/*/*.rpm .
    artifacts:
        when: on_success
        paths:
            - ${SOURCE_NAME}*.rpm
    only:
        - branches
    tags:
        - docker

obsscratch_xenial:
    stage: build
    variables:
        OBS_TARGET_DISTRO: "xUbuntu_16.04"
    script:
        - obsctl scratchbuild -f ../${CI_PROJECT_NAME}.tar.gz -o $CI_PROJECT_NAMESPACE -n $CI_PROJECT_NAME -t $PARENT_VERSION -R $CI_COMMIT_SHA -B $CI_COMMIT_REF_NAME -s $OBS_PROJECT -p $OBS_PACKAGE -T git -d $OBS_TARGET_DISTRO -im
        - cp -a scratchbuild-*/home/abuild/debbuild/DEBS/*/*.deb .
    artifacts:
        when: on_success
        paths:
            - ${SOURCE_NAME}*.deb
    only:
        - branches
    tags:
        - docker

obsscratch_bionic:
    stage: build
    variables:
        OBS_TARGET_DISTRO: "xUbuntu_18.04"
    script:
        - obsctl scratchbuild -f ../${CI_PROJECT_NAME}.tar.gz -o $CI_PROJECT_NAMESPACE -n $CI_PROJECT_NAME -t $PARENT_VERSION -R $CI_COMMIT_SHA -B $CI_COMMIT_REF_NAME -s $OBS_PROJECT -p $OBS_PACKAGE -T git -d $OBS_TARGET_DISTRO -im
        - cp -a scratchbuild-*/home/abuild/debbuild/DEBS/*/*.deb .
    artifacts:
        when: on_success
        paths:
            - ${SOURCE_NAME}*.deb
    only:
        - branches
    tags:
        - docker

obsscratch_focal:
    stage: build
    variables:
        OBS_TARGET_DISTRO: "xUbuntu_20.04"
    script:
        - obsctl scratchbuild -f ../${CI_PROJECT_NAME}.tar.gz -o $CI_PROJECT_NAMESPACE -n $CI_PROJECT_NAME -t $PARENT_VERSION -R $CI_COMMIT_SHA -B $CI_COMMIT_REF_NAME -s $OBS_PROJECT -p $OBS_PACKAGE -T git -d $OBS_TARGET_DISTRO -im
        - cp -a scratchbuild-*/home/abuild/debbuild/DEBS/*/*.deb .
    artifacts:
        when: on_success
        paths:
            - ${SOURCE_NAME}*.deb
    only:
        - branches
    tags:
        - docker

obsscratch_bullseye:
    stage: build
    variables:
        OBS_TARGET_DISTRO: "Debian_11"
    script:
        - obsctl scratchbuild -f ../${CI_PROJECT_NAME}.tar.gz -o $CI_PROJECT_NAMESPACE -n $CI_PROJECT_NAME -t $PARENT_VERSION -R $CI_COMMIT_SHA -B $CI_COMMIT_REF_NAME -s $OBS_PROJECT -p $OBS_PACKAGE -T git -d $OBS_TARGET_DISTRO -im
        - cp -a scratchbuild-*/home/abuild/debbuild/DEBS/*/*.deb .
    artifacts:
        when: on_success
        paths:
            - ${SOURCE_NAME}*.deb
    only:
        - branches
    tags:
        - docker

obsrelease:
    stage: deploy
    script:
        - obsctl tarimport -f ../${CI_PROJECT_NAME}.tar.gz -o $CI_PROJECT_NAMESPACE -n $CI_PROJECT_NAME -t $CI_COMMIT_TAG -R $CI_COMMIT_SHA -B $CI_COMMIT_REF_NAME -s $OBS_PROJECT -p $OBS_PACKAGE -T git -i
    only:
        - tags@mswitala_datto/dattobd

    tags:
        - docker
